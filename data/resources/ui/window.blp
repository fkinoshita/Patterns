using Gtk 4.0;
using Adw 1;
using GtkSource 5;

template $Window : Adw.ApplicationWindow {
  title: _("Wildcard");
  default-width: 450;
  default-height: 570;
  width-request: 300;
  height-request: 250;

  content: Adw.ToastOverlay toast_overlay {
    child: Gtk.Box {
      orientation: vertical;

      Adw.HeaderBar {
        styles ["flat"]

        [end]
        Gtk.MenuButton {
          menu-model: primary_menu;
          primary: true;
          tooltip-text: _("Main Menu");
          icon-name: "open-menu-symbolic";
        }
      }

      Adw.Clamp {
        Gtk.Box {
          orientation: vertical;
          hexpand: true;
          vexpand: true;
          margin-top: 0;
          margin-bottom: 18;
          margin-start: 18;
          margin-end: 18;
          spacing: 18;

          Adw.PreferencesGroup {
            title: _("Test String");

            Gtk.Box {
              orientation: vertical;
              hexpand: true;
              vexpand: true;

              styles ["card", "text-box"]

              Gtk.ScrolledWindow {
                hexpand: true;
                vexpand: true;
                height-request: 160;

                styles ["scrolled-window"]

                Gtk.TextView {
                  monospace: true;
                  wrap-mode: word_char;
                  hexpand: true;
                  vexpand: true;
                  top-margin: 12;
                  bottom-margin: 12;
                  left-margin: 12;
                  right-margin: 12;

                  buffer: Gtk.TextBuffer test_buffer {
                    changed => $on_buffer_changed() swapped;
                  };
                }
              }

              Gtk.Label matches_label {
                label: _("no matches");
                halign: end;
                margin-top: 6;
                margin-bottom: 6;
                margin-end: 12;

                styles ["dim-label"]
              }
            }
          }

          Adw.PreferencesGroup {
            title: _("Options");

            Adw.ComboRow mode_combo_row {
              title: _("Mode");

              notify::selected => $on_mode_changed() swapped;
            }

            Adw.EntryRow regex_row {
              title: _("Regular Expression");

              changed => $on_buffer_changed() swapped;
            }

            Adw.EntryRow replacement_row {
              title: _("Replacement String");
            }
          }

          Gtk.Button apply_button {
            sensitive: false;
            label: _("Apply");
            halign: center;

            styles ["suggested-action", "pill"]

            clicked => $on_apply_button_clicked() swapped;
          }
        }
      }
    };
  };
}

menu primary_menu {
  section {

    item {
      label: _("_Keyboard Shortcuts");
      action: "win.show-help-overlay";
    }

    item {
      label: _("_About Wildcard");
      action: "win.about";
    }

  }
}
